// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String @id @default(cuid())
  phone    String @unique
  name     String
  password String @db.Text

  image Image[]

  role             Role      @default(USER)
  isVerified       Boolean   @default(false)
  verificationCode Int?
  verificationDate DateTime?

  username String? @unique
  bio      String?
  website  String?
  gender   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts      Post[]
  saved      SavedPost[]
  likes      Like[]
  comments   Comment[]
  followedBy Follows[]   @relation("following")
  following  Follows[]   @relation("follower")

  @@map(name: "users")
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String   @db.Text
  key        String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  caption   String?     @db.Text
  // fileUrl   String      @unique
  fileUrl   Image[]
  likes     Like[]
  savedBy   SavedPost[]
  comments  Comment[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @map("user_id")

  @@index([userId])
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  userId    String   @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  userId    String   @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  userId    String   @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}
